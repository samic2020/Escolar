<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAA
        ADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAAAwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAABAAgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AAAAPwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAEACAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIA
        Af8AAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
        AKgBAACyAQAAsgEAALIBAACHAAAAQAIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIA
        Af8CAAH/AgAB/wAAAD8BAACIAQAAsgEAALIBAACyAQAAqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAQAA8AIAAf8CAAH/AgAB/wEAAMEAAABAAgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIA
        Af8CAAH/AgAB/wIAAf8CAAH/AAAAPwEAAMICAAH/AgAB/wIAAf8BAADwAAAAAAAAAAAAAAAAAAAAAAEA
        AJcBAACXAQAAlwAAAAoBAADwAgAB/wIAAf8CAAH/AQAAwQAAAEACAAH/AgAB/wIAAf8CAAH/AgAB/wIA
        Af8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8AAAA/AQAAwgIAAf8CAAH/AgAB/wEAAPAAAAAKAQAAlwEA
        AJcBAACXAgAB/wIAAf8CAAH/AAAAEgEAAPACAAH/AgAB/wIAAf8BAADBAAAAQAIAAf8CAAH/AgAB/wIA
        Af8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wAAAD8BAADCAgAB/wIAAf8CAAH/AQAA8AAA
        ABICAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8AAAASAQAA8AIAAf8CAAH/AgAB/wEAAMEAAABAAgAB/wIA
        Af8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AAAAPwEAAMICAAH/AgAB/wIA
        Af8BAADwAAAAEgIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wAAABIBAADwAgAB/wIAAf8CAAH/AQAAwQAA
        AEACAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8AAAA/AQAAwgIA
        Af8CAAH/AgAB/wEAAPAAAAASAgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AAAAEgEAAPACAAH/AgAB/wIA
        Af8BAADBAAAAQAIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wAA
        AD8BAADCAgAB/wIAAf8CAAH/AQAA8AAAABICAAH/AgAB/wIAAf8CAAH+AgAB/wIAAf8AAAASAQAA8AIA
        Af8CAAH/AgAB/wEAAMEAAABAAgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wIA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAQAAwAIAAf8CAAH/AgAB/wIAAf8CAAH/AgAB/wEAAMAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AQAA+wIAAf8CAAH/AgAB/wIAAf8BAAD7AAAAPwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABKAQAA3gIAAf8CAAH/AQAA3gAA
        AEoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAJAAA
        ACQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////gAH//4AB//+AAf/wAAAP8AAADwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgAABOEAAAhhCAEIYAQCAGADDAB+AgQH/gQCB/8EAg///AP///w
        D///8A////AP///4H////D////////////8=
</value>
  </data>
</root>